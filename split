#!/usr/bin/env node
'use strict';

const fs = require('fs');
const path = require('path');
const chalk = require('chalk');
const glob = require('globule');
const xml2js = require('xml2js');
const moment = require('moment');
const xmlParser = new xml2js.Parser();
const commander = require('commander');

const TO_RAD = Math.PI / 180.0;

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Default settings
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

const SOURCE_DIR = 'source/';
const DEST_DIR = 'result/';
const MAX_POINTS = 30000;
const TZ_OFFSET = 0;
const MIN_MOVE = 1.25;
const HDOP_MAX = 5.0;

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Commander Setup
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

commander
  .version('0.2.0')
  .option('--source <path>', 'Source folder for GPX files', SOURCE_DIR)
  .option('--dest <path>', 'Destination folder for generated files', DEST_DIR)
  .option('--max <value>', 'Maximum points per file', MAX_POINTS)
  .option('--tz-offset <value>', 'Timezone offset', TZ_OFFSET)
  .option('--hdop-max <value>', 'Max HDOP to include', HDOP_MAX)
  .option('--min-move <value>', 'Minimum movement between points (m)', MIN_MOVE)
  .option('--prefix <prefix>', 'File prefix to add')
  .option('--no-filter', 'Disable filter of points')
  .option('--drop-unsorted', 'Drop unsorted points instead of deleting them')
  .parse(process.argv);

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Read & parse GPX files
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

/**
 * Gets a list of GPX files in the specified directory.
 *
 * @param {String} dir The directory to search for GPX files in.
 * @return {Array} A sorted list of GPX files in directory.
 */
function getGPXFileList(dir) {
  const globOpts = {
    prefixBase: true,
    srcBase: dir,
  };
  return glob.find('*.gpx', globOpts).sort();
}

/**
 * Read and parse an array of GPX files, and create a list of points.
 *
 * @param {Array} files The list of files to read and parse.
 * @return {Array} A list of GPS points read from the GPX files.
 */
function readGPXFiles(files) {
  let points = [];
  files.forEach((fileName) => {
    console.log(` Parsing file: ${chalk.cyan(fileName)}`);
    const gpx = fs.readFileSync(fileName);
    xmlParser.parseString(gpx, function(err, result) {
      const pointsInFile = getPoints(result);
      points = points.concat(pointsInFile);
    });
  });
  return points;
}

/**
 * Gets the points from a parsed GPX file.
 *
 * @param {Array} parsedGPX The parsed GPX file to process.
 * @return {Array} A collection of GPS points.
 */
function getPoints(parsedGPX) {
  const tracks = parsedGPX.gpx.trk;
  let results = [];
  tracks.forEach((track) => {
    const trackSegments = track.trkseg;
    trackSegments.forEach((segment) => {
      const points = segment.trkpt;
      points.forEach((pt) => {
        const point = {
          lat: pt.$.lat,
          lon: pt.$.lon,
          time: pt.time[0],
        };
        if (pt.ele && pt.ele[0]) {
          point.ele = pt.ele[0];
        }
        if (pt.hdop && pt.hdop[0]) {
          point.hdop = pt.hdop[0];
        }
        results.push(point);
      });
    });
  });
  return results;
}

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Verify points are sorted & sort points
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

/**
 * Verifies the list of GPS points are sorted.
 *
 * @param {Array} points A list of GPS points.
 * @return {Boolean}
 */
function verifySorted(points) {
  let isSorted = true;
  let lastTime = 0;
  points.forEach((point) => {
    let curTime = moment(point.time).valueOf();
    if (curTime < lastTime) {
      isSorted = false;
      point.unsorted = true;
      return;
    }
    lastTime = curTime;
  });
  return isSorted;
}

/**
 * Sorts a list of GPS points by time.
 *
 * @param {Array} points A list of GPS points.
 * @return {Array}
 */
function sortPoints(points) {
  /**
   * Compares two GPS points by time.
   *
   * @param {Object} a First GPS point to be compared.
   * @param {Object} b Second GPS point to be compared.
   * @return {number}
   */
  function comparePoints(a, b) {
    const aTime = moment(a.time).valueOf();
    const bTime = moment(b.time).valueOf();
    return aTime - bTime;
  }
  return points.sort(comparePoints);
}

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Filter Points by distance or HDOP
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

/**
 * Calculates the distance between two GPS points
 *
 * @see: https://en.wikipedia.org/wiki/Haversine_formula
 *
 * @param {number} lat1 Current latitude.
 * @param {number} lon1 Current longitude.
 * @param {number} lat2 Previous latitude.
 * @param {number} lon2 Previous longitude.
 * @return {number} distance (in meters) between the two points
 */
function distBetween(lat1, lon1, lat2, lon2) {
  // Convert lat/lon to Radians
  const radLat1 = lat1 * TO_RAD;
  const radLon1 = lon1 * TO_RAD;
  const radLat2 = lat2 * TO_RAD;
  const radLon2 = lon2 * TO_RAD;
  // Calculate the delta Lat/Lon
  const deltaLat = radLat2 - radLat1;
  const deltaLon = radLon2 - radLon1;
  // Calculate the inner value
  const a = Math.pow(Math.sin(deltaLat / 2), 2) +
            Math.cos(radLat1) *
            Math.cos(radLat2) *
            Math.pow(Math.sin(deltaLon / 2), 2);
  const d = 2 * 6370000 * Math.asin(Math.sqrt(a));
  return d;
}

/**
 * Filter the list of GPS points and remove any where the difference between
 * two points isn't enough, or where the HDOP is greater than the value
 * provided.
 *
 * @see https://en.m.wikipedia.org/wiki/Dilution_of_precision_(navigation)#Meaning_of_DOP_Values
 *
 * @param {Array} points A list of GPS points.
 * @param {number} minMove Minimum distance moved between points
 * @param {number} hdopMax Maximum value for the hdop.
 * @param {boolean} dropUnsorted Drops unsorted points from the list
 * @return {Array}
 */
function filterPoints(points, minMove, hdopMax, dropUnsorted) {
  let results = [];
  let lastLat = Number.MAX_SAFE_INTEGER;
  let lastLon = Number.MAX_SAFE_INTEGER;
  points.forEach((point) => {
    // If we're dropping unsorted points, drop this point
    if (point.unsorted && dropUnsorted) {
      return;
    }

    // Calculate the distance between the current GPS point and the previous
    if (distBetween(point.lat, point.lon, lastLat, lastLon) < minMove) {
      return;
    }

    // Is the HDOP accurate enough, otherwise drop the point
    if (point.hdop && parseFloat(point.hdop) > hdopMax) {
      return;
    }

    // All good - save the point
    results.push(point);
    lastLat = point.lat;
    lastLon = point.lon;
  });
  return results;
}

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Save a list of points as a GPX file
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

const XML_TAG = '<?xml version="1.0" encoding="UTF-8" standalone="no" ?>';
const GPX_XMLNS = `xmlns="http://www.topografix.com/GPX/1/1"`;
const GPX_VERSION = `version="1.1"`;
const GPX_CREATOR = `creator="https://github.com/petele/gpx-split"`;
const GPX_TAG = `<gpx ${GPX_XMLNS} ${GPX_VERSION} ${GPX_CREATOR}>`;

/**
 * Generate a GPX file for the current list of points.
 *
 * @param {Array} points A list of GPS points.
 * @param {String} fileName The filename to save.
 */
function saveGPXFile(points, fileName) {
  let count = 0;
  let lines = [];
  fileName += '.gpx';
  lines.push(XML_TAG);
  lines.push(GPX_TAG);
  lines.push(`  <trk>`);
  lines.push(`    <name>${fileName}</name>`);
  lines.push(`    <trkseg>`);
  points.forEach((point) => {
    lines.push(`      <trkpt lat="${point.lat}" lon="${point.lon}">`);
    lines.push(`        <time>${point.time}</time>`);
    if (point.ele) {
      lines.push(`        <ele>${point.ele}</ele>`);
    }
    if (point.hdop) {
      lines.push(`        <hdop>${point.hdop}</hdop>`);
    }
    lines.push(`      </trkpt>`);
    count++;
  });
  lines.push(`    </trkseg>`);
  lines.push(`  </trk>`);
  lines.push(`</gpx>`);
  console.log(` Saving ${chalk.cyan(count)} points to ${chalk.cyan(fileName)}`);
  fs.writeFileSync(fileName, lines.join('\n'));
}

/**
 * Returns the full filename and path.
 *
 * @param {String} dir The directory to write the file to.
 * @param {String} prefix The prefix to add to the start of the file.
 * @param {String} filename The filename.
 * @return {String}
 */
function getFilePath(dir, prefix, filename) {
  if (prefix) {
    filename = prefix + '-' + filename;
  }
  return path.join(dir, filename);
}

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Splitting functions
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

/**
 * Split a list of points by number of points.
 *
 * @param {Array} points A list of GPS points.
 * @param {number} maxPoints The maximum number of points per file.
 * @param {String} dir The directory to write the file to.
 * @param {String} prefix A prefix to add to the filename.
 */
function splitBySize(points, maxPoints, dir, prefix) {
  let fileIndex = 1;
  while (points.length > 0) {
    let fileName = fileIndex.toString().padStart(2, '0');
    fileName = getFilePath(dir, prefix, fileName);
    saveGPXFile(points.splice(0, maxPoints), fileName);
    fileIndex++;
  }
}

/**
 * Split a list of points by date.
 *
 * @param {Array} points A list of GPS points.
 * @param {number} tzOffset The timezone offset.
 * @param {String} dir The directory to write the file to.
 * @param {String} prefix A prefix to add to the filename.
 */
function splitByDate(points, tzOffset, dir, prefix) {
  let dt = moment.utc(points[0].time).add(tzOffset, 'h');
  let day = dt.format('DD');
  let fileName = getFilePath(dir, prefix, dt.format('YYYY-MM-DD'));
  let pointsForDay = [];
  points.forEach((point) => {
    dt = moment.utc(point.time).add(tzOffset, 'h');
    if (day !== dt.format('DD')) {
      saveGPXFile(pointsForDay, fileName);
      day = dt.format('DD');
      fileName = getFilePath(dir, prefix, dt.format('YYYY-MM-DD'));
      pointsForDay = [];
    }
    pointsForDay.push(point);
  });
  saveGPXFile(pointsForDay, fileName);
}

/** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **
 * Main
 ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** ** **/

console.log(chalk.bold('GPX File Splitter'));

if (commander.source !== SOURCE_DIR) {
  console.log(` --source=${chalk.cyan(commander.source)}`);
}

if (commander.dest !== DEST_DIR) {
  console.log(` --dest=${chalk.cyan(commander.dest)}`);
}

if (commander.prefix) {
  console.log(` --prefix=${chalk.cyan(commander.prefix)}`);
}

if (!commander.filter) {
  console.log(` --no-filter`);
}

if (commander.dropUnsorted) {
  console.log(` --drop-unsorted`);
}

commander.hdopMax = parseFloat(commander.hdopMax);
if (commander.hdopMax !== HDOP_MAX) {
  console.log(` --hdop-max=${chalk.cyan(commander.hdopMax)}`);
}

commander.minMove = parseFloat(commander.minMove);
if (commander.minMove !== MIN_MOVE) {
  console.log(` --min-move=${chalk.cyan(commander.minMove)}`);
}

commander.max = parseInt(commander.max);
if (commander.max !== MAX_POINTS) {
  console.log(` --max=${chalk.cyan(commander.max)}`);
}

commander.tzOffset = parseInt(commander.tzOffset);
if (commander.tzOffset === 0) {
  const warn = chalk.bold.red('WARNING:');
  const tzOff = chalk.cyan('--tz-offset');
  const sure = chalk.bold('Are you sure?');
  console.log(` ${warn} ${tzOff} is ${chalk.yellow('0')}. ${sure}`);
} else {
  console.log(` --tz_offset=${chalk.cyan(commander.tzOffset)}`);
}

// Get the list of files
const fileList = getGPXFileList(commander.source);
if (fileList.length === 0) {
  console.log('No files found, exiting...');
  process.exit();
}

// Read all the GPX files and create an array of GPS points
console.log(chalk.bold('Reading source GPX files...'));
let allPoints = readGPXFiles(fileList);
const numPoints = allPoints.length;
console.log(` Found ${chalk.cyan(numPoints)} points`);

// Check if the list is sorted
console.log(chalk.bold('Verifying points are sorted...'));
const isSorted = verifySorted(allPoints);

// Sort the list if necessary
if (!isSorted) {
  console.log(chalk.yellow(' Warning:'), 'points are not sorted.');
  if (commander.dropUnsorted) {
    console.log(' Unsorted points will be dropped.');
  } else {
    console.log(chalk.bold('Sorting points...'));
    allPoints = sortPoints(allPoints);
  }
}

// Filter points to remove stationary points
if (commander.filter) {
  console.log(chalk.bold('Filtering points...'));
  const minMove = commander.minMove;
  const hdopMax = commander.hdopMax;
  const dropUnsorted = commander.dropUnsorted;
  allPoints = filterPoints(allPoints, minMove, hdopMax, dropUnsorted);
  const after = chalk.cyan(allPoints.length);
  console.log(` Kept ${after} of ${chalk.cyan(numPoints)} points`);
}

// Exit if there are no GPS points remaining.
if (allPoints.length === 0) {
  console.log('No GPS points found in files, exiting...');
  process.exit();
}

// Create the output directory if it doesn't exist
if (!fs.existsSync(commander.dest)) {
  fs.mkdirSync(commander.dest);
}

// Split GPS points by date
console.log(chalk.bold(`Splitting by date...`));
splitByDate(allPoints, commander.tzOffset, commander.dest, commander.prefix);

// Split GPS points by file size
console.log(chalk.bold('Splitting by size...'));
splitBySize(allPoints, commander.max, commander.dest, commander.prefix);
